#' @importFrom graphics lines
#' @importFrom graphics plot
#' @export
#'
racircal_advanced <- function(calfile, mincut, maxcut, datafile, skiplines){
# Load calibration data -----------------------------------
cal <- read_6800(calfile, skiplines)
cal$sep_columns <- round(cal$CO2_r, digits = -2)
dataframe <- read_6800(datafile, skiplines)
dataframe$sep_columns <- round(dataframe$CO2_r, digits = -2)
# Assign cutoffs ------------------------------------------
mincut <- ifelse(missing(mincut) == TRUE, min(cal$CO2_r), mincut)
maxcut <- ifelse(missing(maxcut) == TRUE, max(cal$CO2_r), maxcut)
cal <- cal[cal$CO2_r > mincut, ]
cal <- cal[cal$CO2_r < maxcut, ]
# Assigns maximum and minimum CO2_r values based on -------
# calibration data ----------------------------------------
maxcal <- max(cal$CO2_r)
mincal <- min(cal$CO2_r)
dataframe <- dataframe[dataframe$CO2_r > mincal, ]
dataframe <- dataframe[dataframe$CO2_r < maxcal, ]
range.split_cal <- split(cal, cal$sep_columns)
range.split_data <- split(dataframe, dataframe$sep_columns)
for(i in 1:length(range.split_data)){
cal1st <- lm(A ~ CO2_r, data = range.split_cal[[i]])
cal2nd <- lm(A ~ poly(CO2_r, 2), data = range.split_cal[[i]])
cal3rd <- lm(A ~ poly(CO2_r, 3), data = range.split_cal[[i]])
cal4th <- lm(A ~ poly(CO2_r, 4), data = range.split_cal[[i]])
cal5th <- lm(A ~ poly(CO2_r, 5), data = range.split_cal[[i]])
# Use BIC to assess best polynomial -----------------------
bics <- BIC(cal1st, cal2nd, cal3rd, cal4th, cal5th)
best <- noquote(rownames(bics)[bics$BIC == min(bics$BIC)])
# Correct leaf data ---------------------------------------
ifelse(best == "cal5th", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal5th, range.split_data[[i]]),
ifelse(best == "cal4th", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal4th, range.split_data[[i]]),
ifelse(best == "cal3rd", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal3rd, range.split_data[[i]]),
ifelse(best == "cal2nd", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal2nd, range.split_data[[i]]),
range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal1st, range.split_data[[i]])))))
range.split_data[[i]]$Cicor = ( ( (range.split_data[[i]]$gtc - range.split_data[[i]]$E / 2) * range.split_data[[i]]$Ca - range.split_data[[i]]$Acor) /
(range.split_data[[i]]$gtc + range.split_data[[i]]$E / 2))
}
id <- unsplit(range.split_data, range.split_data$sep_columns)
# Plot corrected leaf data --------------------------------
plot(Acor ~ Cicor, data = id)
# Add ID label to file ------------------------------------
id$ID <- rep(datafile, length(id$obs))
# Remove columns filled with NA ---------------------------
id1 <- id[, unlist(lapply(id, function(x) !all(is.na(x))))]
# Write data output to .csv -------------------------------
write.csv(id1, paste(datafile, ".csv", sep = ""))
}
#' @importFrom utils write.csv
#' @importFrom utils read.delim
#' @importFrom stats BIC
#' @importFrom stats lm
#' @importFrom stats predict
#' @importFrom graphics legend
#' @importFrom graphics lines
#' @importFrom graphics plot
#' @export
#'
racircal_advanced <- function(calfile, mincut, maxcut, datafile, skiplines){
# Load calibration data -----------------------------------
cal <- read_6800(calfile, skiplines)
cal$sep_columns <- round(cal$CO2_r, digits = -2)
dataframe <- read_6800(datafile, skiplines)
dataframe$sep_columns <- round(dataframe$CO2_r, digits = -2)
# Assign cutoffs ------------------------------------------
mincut <- ifelse(missing(mincut) == TRUE, min(cal$CO2_r), mincut)
maxcut <- ifelse(missing(maxcut) == TRUE, max(cal$CO2_r), maxcut)
cal <- cal[cal$CO2_r > mincut, ]
cal <- cal[cal$CO2_r < maxcut, ]
# Assigns maximum and minimum CO2_r values based on -------
# calibration data ----------------------------------------
maxcal <- max(cal$CO2_r)
mincal <- min(cal$CO2_r)
dataframe <- dataframe[dataframe$CO2_r > mincal, ]
dataframe <- dataframe[dataframe$CO2_r < maxcal, ]
range.split_cal <- split(cal, cal$sep_columns)
range.split_data <- split(dataframe, dataframe$sep_columns)
for(i in 1:length(range.split_data)){
cal1st <- lm(A ~ CO2_r, data = range.split_cal[[i]])
cal2nd <- lm(A ~ poly(CO2_r, 2), data = range.split_cal[[i]])
cal3rd <- lm(A ~ poly(CO2_r, 3), data = range.split_cal[[i]])
cal4th <- lm(A ~ poly(CO2_r, 4), data = range.split_cal[[i]])
cal5th <- lm(A ~ poly(CO2_r, 5), data = range.split_cal[[i]])
# Use BIC to assess best polynomial -----------------------
bics <- BIC(cal1st, cal2nd, cal3rd, cal4th, cal5th)
best <- noquote(rownames(bics)[bics$BIC == min(bics$BIC)])
# Correct leaf data ---------------------------------------
ifelse(best == "cal5th", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal5th, range.split_data[[i]]),
ifelse(best == "cal4th", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal4th, range.split_data[[i]]),
ifelse(best == "cal3rd", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal3rd, range.split_data[[i]]),
ifelse(best == "cal2nd", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal2nd, range.split_data[[i]]),
range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal1st, range.split_data[[i]])))))
range.split_data[[i]]$Cicor = ( ( (range.split_data[[i]]$gtc - range.split_data[[i]]$E / 2) * range.split_data[[i]]$Ca - range.split_data[[i]]$Acor) /
(range.split_data[[i]]$gtc + range.split_data[[i]]$E / 2))
}
id <- unsplit(range.split_data, range.split_data$sep_columns)
# Plot corrected leaf data --------------------------------
plot(Acor ~ Cicor, data = id)
# Add ID label to file ------------------------------------
id$ID <- rep(datafile, length(id$obs))
# Remove columns filled with NA ---------------------------
id1 <- id[, unlist(lapply(id, function(x) !all(is.na(x))))]
# Write data output to .csv -------------------------------
write.csv(id1, paste(datafile, ".csv", sep = ""))
}
racircal_advanced(calfile = system.file("extdata", "cal", package = "racir"), datafile = system.file("extdata", "poplar_2", package = "racir"), skiplines = 53)
id <- unsplit(range.split_data, range.split_data$sep_columns)
id <- unsplit(range.split_data)
View(range.split_data)
?unsplit
id <- unsplit(range.split_data, range.split_data$sep_columns)
id <- unsplit(range.split_data, range.split_data$sep_columns)
id <- do.call("rbind", range.split_data)
#' @importFrom utils write.csv
#' @importFrom utils read.delim
#' @importFrom stats BIC
#' @importFrom stats lm
#' @importFrom stats predict
#' @importFrom graphics legend
#' @importFrom graphics lines
#' @importFrom graphics plot
#' @export
#'
racircal_advanced <- function(calfile, mincut, maxcut, datafile, skiplines){
# Load calibration data -----------------------------------
cal <- read_6800(calfile, skiplines)
cal$sep_columns <- round(cal$CO2_r, digits = -2)
dataframe <- read_6800(datafile, skiplines)
dataframe$sep_columns <- round(dataframe$CO2_r, digits = -2)
# Assign cutoffs ------------------------------------------
mincut <- ifelse(missing(mincut) == TRUE, min(cal$CO2_r), mincut)
maxcut <- ifelse(missing(maxcut) == TRUE, max(cal$CO2_r), maxcut)
cal <- cal[cal$CO2_r > mincut, ]
cal <- cal[cal$CO2_r < maxcut, ]
# Assigns maximum and minimum CO2_r values based on -------
# calibration data ----------------------------------------
maxcal <- max(cal$CO2_r)
mincal <- min(cal$CO2_r)
dataframe <- dataframe[dataframe$CO2_r > mincal, ]
dataframe <- dataframe[dataframe$CO2_r < maxcal, ]
range.split_cal <- split(cal, cal$sep_columns)
range.split_data <- split(dataframe, dataframe$sep_columns)
for(i in 1:length(range.split_data)){
cal1st <- lm(A ~ CO2_r, data = range.split_cal[[i]])
cal2nd <- lm(A ~ poly(CO2_r, 2), data = range.split_cal[[i]])
cal3rd <- lm(A ~ poly(CO2_r, 3), data = range.split_cal[[i]])
cal4th <- lm(A ~ poly(CO2_r, 4), data = range.split_cal[[i]])
cal5th <- lm(A ~ poly(CO2_r, 5), data = range.split_cal[[i]])
# Use BIC to assess best polynomial -----------------------
bics <- BIC(cal1st, cal2nd, cal3rd, cal4th, cal5th)
best <- noquote(rownames(bics)[bics$BIC == min(bics$BIC)])
# Correct leaf data ---------------------------------------
ifelse(best == "cal5th", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal5th, range.split_data[[i]]),
ifelse(best == "cal4th", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal4th, range.split_data[[i]]),
ifelse(best == "cal3rd", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal3rd, range.split_data[[i]]),
ifelse(best == "cal2nd", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal2nd, range.split_data[[i]]),
range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal1st, range.split_data[[i]])))))
range.split_data[[i]]$Cicor = ( ( (range.split_data[[i]]$gtc - range.split_data[[i]]$E / 2) * range.split_data[[i]]$Ca - range.split_data[[i]]$Acor) /
(range.split_data[[i]]$gtc + range.split_data[[i]]$E / 2))
}
id <- do.call("rbind", range.split_data)
# Plot corrected leaf data --------------------------------
plot(Acor ~ Cicor, data = id)
# Add ID label to file ------------------------------------
id$ID <- rep(datafile, length(id$obs))
# Remove columns filled with NA ---------------------------
id1 <- id[, unlist(lapply(id, function(x) !all(is.na(x))))]
# Write data output to .csv -------------------------------
write.csv(id1, paste(datafile, ".csv", sep = ""))
}
racircal_advanced(calfile = system.file("extdata", "cal", package = "racir"), datafile = system.file("extdata", "poplar_2", package = "racir"), skiplines = 53)
getwd()
id3 <- id[id$Cicor < 200,]
plot(Acor ~ Cicor, data = id3)
id3 <- id[id$Cicor < 250,]
plot(Acor ~ Cicor, data = id3)
id3 <- id[id$Cicor < 550,]
plot(Acor ~ Cicor, data = id3)
racircal(calfile = system.file("extdata", "cal", package = "racir"), datafile = system.file("extdata", "poplar_2", package = "racir"), skiplines = 53)
#' @importFrom utils write.csv
#' @importFrom utils read.delim
#' @importFrom stats BIC
#' @importFrom stats lm
#' @importFrom stats predict
#' @importFrom graphics legend
#' @importFrom graphics lines
#' @importFrom graphics plot
#' @export
#'
racircal_advanced <- function(calfile, mincut, maxcut, datafile, skiplines, filetype){
filetype <- ifelse(missing(filetype) == TRUE, 6800, filetype)
skiplines <- ifelse(missing(skiplines) == TRUE, 53, skiplines)
# Load data -----------------------------------
ifelse(filetype == 6800, cal <- read_6800(calfile, skiplines),
ifelse(filetype == 'csv', cal <- read.csv(calfile),
"Error: filetype not recognized"))
ifelse(filetype == 6800, dataframe <- read_6800(datafile, skiplines),
ifelse(filetype == 'csv', dataframe <- read.csv(datafile),
"Error: filetype not recognized"))
cal$sep_columns <- round(cal$CO2_r, digits = -2)
dataframe$sep_columns <- round(dataframe$CO2_r, digits = -2)
# Assign cutoffs ------------------------------------------
mincut <- ifelse(missing(mincut) == TRUE, min(cal$CO2_r), mincut)
maxcut <- ifelse(missing(maxcut) == TRUE, max(cal$CO2_r), maxcut)
cal <- cal[cal$CO2_r > mincut, ]
cal <- cal[cal$CO2_r < maxcut, ]
# Assigns maximum and minimum CO2_r values based on -------
# calibration data ----------------------------------------
maxcal <- max(cal$CO2_r)
mincal <- min(cal$CO2_r)
dataframe <- dataframe[dataframe$CO2_r > mincal, ]
dataframe <- dataframe[dataframe$CO2_r < maxcal, ]
range.split_cal <- split(cal, cal$sep_columns)
range.split_data <- split(dataframe, dataframe$sep_columns)
for(i in 1:length(range.split_data)){
cal1st <- lm(A ~ CO2_r, data = range.split_cal[[i]])
cal2nd <- lm(A ~ poly(CO2_r, 2), data = range.split_cal[[i]])
cal3rd <- lm(A ~ poly(CO2_r, 3), data = range.split_cal[[i]])
cal4th <- lm(A ~ poly(CO2_r, 4), data = range.split_cal[[i]])
cal5th <- lm(A ~ poly(CO2_r, 5), data = range.split_cal[[i]])
# Use BIC to assess best polynomial -----------------------
bics <- BIC(cal1st, cal2nd, cal3rd, cal4th, cal5th)
best <- noquote(rownames(bics)[bics$BIC == min(bics$BIC)])
# Correct leaf data ---------------------------------------
ifelse(best == "cal5th", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal5th, range.split_data[[i]]),
ifelse(best == "cal4th", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal4th, range.split_data[[i]]),
ifelse(best == "cal3rd", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal3rd, range.split_data[[i]]),
ifelse(best == "cal2nd", range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal2nd, range.split_data[[i]]),
range.split_data[[i]]$Acor <- range.split_data[[i]]$A - predict(cal1st, range.split_data[[i]])))))
range.split_data[[i]]$Cicor = ( ( (range.split_data[[i]]$gtc - range.split_data[[i]]$E / 2) * range.split_data[[i]]$Ca - range.split_data[[i]]$Acor) /
(range.split_data[[i]]$gtc + range.split_data[[i]]$E / 2))
}
id <- do.call("rbind", range.split_data)
# Plot corrected leaf data --------------------------------
plot(Acor ~ Cicor, data = id)
# Add ID label to file ------------------------------------
id$ID <- rep(datafile, length(id$obs))
# Remove columns filled with NA ---------------------------
id1 <- id[, unlist(lapply(id, function(x) !all(is.na(x))))]
# Write data output to .csv -------------------------------
write.csv(id1, paste(datafile, ".csv", sep = ""))
}
racircal_advanced(calfile = system.file("extdata", "cal", package = "racir"), datafile = system.file("extdata", "poplar_2", package = "racir"), skiplines = 53)
#' @importFrom utils write.csv
#' @importFrom utils read.delim
#' @importFrom stats BIC
#' @importFrom stats lm
#' @importFrom stats predict
#' @importFrom graphics legend
#' @importFrom graphics lines
#' @importFrom graphics plot
#' @export
#'
racircal_advanced <- function(calfile, mincut, maxcut, datafile, skiplines,
filetype, digits){
#Defaults ---------------------------------------------------
filetype <- ifelse(missing(filetype) == TRUE, 6800, filetype)
skiplines <- ifelse(missing(skiplines) == TRUE, 53, skiplines)
digits <- ifelse(missing(digits) == TRUE, -2, digits)
# Load data -------------------------------------------------
ifelse(filetype == 6800, cal <- read_6800(calfile, skiplines),
ifelse(filetype == 'csv', cal <- read.csv(calfile),
"Error: filetype not recognized"))
ifelse(filetype == 6800, dataframe <- read_6800(datafile, skiplines),
ifelse(filetype == 'csv', dataframe <- read.csv(datafile),
"Error: filetype not recognized"))
#Add separation column --------------------------------------
cal$sep_columns <- round(cal$CO2_r, digits = digits)
dataframe$sep_columns <- round(dataframe$CO2_r, digits = digits)
# Assign cutoffs --------------------------------------------
mincut <- ifelse(missing(mincut) == TRUE, min(cal$CO2_r), mincut)
maxcut <- ifelse(missing(maxcut) == TRUE, max(cal$CO2_r), maxcut)
cal <- cal[cal$CO2_r > mincut, ]
cal <- cal[cal$CO2_r < maxcut, ]
# Assigns maximum and minimum CO2_r values based on ---------
# calibration data ------------------------------------------
maxcal <- max(cal$CO2_r)
mincal <- min(cal$CO2_r)
dataframe <- dataframe[dataframe$CO2_r > mincal, ]
dataframe <- dataframe[dataframe$CO2_r < maxcal, ]
#Split data based on CO2 ranges -----------------------------
range.split_cal <- split(cal, cal$sep_columns)
range.split_data <- split(dataframe, dataframe$sep_columns)
#Model calibration and correct leaf data --------------------
for(i in 1:length(range.split_data)){
cal1st <- lm(A ~ CO2_r, data = range.split_cal[[i]])
cal2nd <- lm(A ~ poly(CO2_r, 2), data = range.split_cal[[i]])
cal3rd <- lm(A ~ poly(CO2_r, 3), data = range.split_cal[[i]])
cal4th <- lm(A ~ poly(CO2_r, 4), data = range.split_cal[[i]])
cal5th <- lm(A ~ poly(CO2_r, 5), data = range.split_cal[[i]])
# Use BIC to assess best polynomial -----------------------
bics <- BIC(cal1st, cal2nd, cal3rd, cal4th, cal5th)
best <- noquote(rownames(bics)[bics$BIC == min(bics$BIC)])
# Correct leaf data ---------------------------------------
ifelse(best == "cal5th", range.split_data[[i]]$Acor <-
range.split_data[[i]]$A - predict(cal5th, range.split_data[[i]]),
ifelse(best == "cal4th", range.split_data[[i]]$Acor <-
range.split_data[[i]]$A - predict(cal4th, range.split_data[[i]]),
ifelse(best == "cal3rd", range.split_data[[i]]$Acor <-
range.split_data[[i]]$A - predict(cal3rd, range.split_data[[i]]),
ifelse(best == "cal2nd", range.split_data[[i]]$Acor <-
range.split_data[[i]]$A - predict(cal2nd, range.split_data[[i]]),
range.split_data[[i]]$Acor <-
range.split_data[[i]]$A - predict(cal1st, range.split_data[[i]])))))
range.split_data[[i]]$Cicor = ( ( (range.split_data[[i]]$gtc -
range.split_data[[i]]$E / 2) *
range.split_data[[i]]$Ca - range.split_data[[i]]$Acor) /
(range.split_data[[i]]$gtc + range.split_data[[i]]$E / 2))
}
#Recombine data -------------------------------------------
id <- do.call("rbind", range.split_data)
# Plot corrected leaf data --------------------------------
plot(Acor ~ Cicor, data = id)
# Add ID label to file ------------------------------------
id$ID <- rep(datafile, length(id$obs))
# Remove columns filled with NA ---------------------------
id1 <- id[, unlist(lapply(id, function(x) !all(is.na(x))))]
# Write data output to .csv -------------------------------
write.csv(id1, paste(datafile, ".csv", sep = ""))
}
#' @importFrom stats BIC
#' @importFrom stats lm
#' @importFrom stats predict
#' @importFrom graphics legend
#' @importFrom graphics lines
#' @importFrom graphics plot
#' @export
#'
#'
#'
racircalcheck_advanced <- function(cal, mincut, maxcut, skiplines, checks, filetype, digits){
#Defaults ---------------------------------------------------
filetype <- ifelse(missing(filetype) == TRUE, 6800, filetype)
skiplines <- ifelse(missing(skiplines) == TRUE, 53, skiplines)
digits <- ifelse(missing(digits) == TRUE, -2, digits)
# Load data -------------------------------------------------
ifelse(filetype == 6800, cal <- read_6800(calfile, skiplines),
ifelse(filetype == 'csv', cal <- read.csv(calfile),
ifelse(filetype == 'dataframe', cal <- calfile,
"Error: filetype not recognized")))
cal$sep_columns <- round(cal$CO2_r, digits = digits)
# Check data for cutoffs ----------------------------------
ifelse(checks == TRUE, plot(A~CO2_r, data = cal, main = "Check cutoffs"), "")
# Assign cutoffs ------------------------------------------
mincut <- ifelse(missing(mincut) == TRUE, min(cal$CO2_r), mincut)
maxcut <- ifelse(missing(maxcut) == TRUE, max(cal$CO2_r), maxcut)
cal <- cal[cal$CO2_r > mincut, ]
cal <- cal[cal$CO2_r < maxcut, ]
# Confirm cutoffs are appropriate -------------------------
ifelse(checks == TRUE, plot(A~CO2_r, data = cal, main = "Confirm cutoffs"), "")
range.split <- split(cal, cal$sep_columns)
for (i in 1:length(range.split)){
# Fit polynomials to calibration curve --------------------
cal1st <- lm(A ~ CO2_r, data = range.split[[i]])
cal2nd <- lm(A ~ poly(CO2_r, 2), data = range.split[[i]])
cal3rd <- lm(A ~ poly(CO2_r, 3), data = range.split[[i]])
cal4th <- lm(A ~ poly(CO2_r, 4), data = range.split[[i]])
cal5th <- lm(A ~ poly(CO2_r, 5), data = range.split[[i]])
range.split[[i]]$predict1 <- predict(cal1st)
range.split[[i]]$predict2 <- predict(cal2nd)
range.split[[i]]$predict3 <- predict(cal3rd)
range.split[[i]]$predict4 <- predict(cal4th)
range.split[[i]]$predict5 <- predict(cal5th)
# Use BIC to assess best polynomial -----------------------
bics <- BIC(cal1st, cal2nd, cal3rd, cal4th, cal5th)
best <- noquote(rownames(bics)[bics$BIC == min(bics$BIC)])
print(best)
}
cal <- do.call("rbind", range.split)
# Plot calibration data and curve fits --------------------
plot(cal$A ~ cal$CO2_r, main = "Calibration Fits")
lines(cal$CO2_r, cal$predict1, col = "green")
lines(cal$CO2_r, cal$predict2, col = "blue")
lines(cal$CO2_r, cal$predict3, col = "red")
lines(cal$CO2_r, cal$predict4, col = "grey")
lines(cal$CO2_r, cal$predict5, col = "black")
legend("bottom", horiz = TRUE, title = "Polynomial",
legend = c("1st", "2nd", "3rd", "4th", "5th"),
col = c("green", "blue", "red", "grey", "black"), lty = 1)
}
#' @importFrom stats BIC
#' @importFrom stats lm
#' @importFrom stats predict
#' @importFrom graphics legend
#' @importFrom graphics lines
#' @importFrom graphics plot
#' @export
#'
#'
#'
racircalcheck <- function(calfile, mincut, maxcut, skiplines, filetype){
# Load calibration data -----------------------------------
filetype <- ifelse(missing(filetype) == TRUE, 6800, filetype)
skiplines <- ifelse(missing(skiplines) == TRUE, 53, skiplines)
# Load data -------------------------------------------------
ifelse(filetype == 6800, cal <- read_6800(calfile, skiplines),
ifelse(filetype == 'csv', cal <- read.csv(calfile),
ifelse(filetype == 'dataframe', cal <- calfile,
"Error: filetype not recognized")))
# Check data for cutoffs ----------------------------------
plot(A~CO2_r, data = cal, main = "Check cutoffs")
# Assign cutoffs ------------------------------------------
mincut <- ifelse(missing(mincut) == TRUE, min(cal$CO2_r), mincut)
maxcut <- ifelse(missing(maxcut) == TRUE, max(cal$CO2_r), maxcut)
cal <- cal[cal$CO2_r > mincut, ]
cal <- cal[cal$CO2_r < maxcut, ]
# Confirm cutoffs are appropriate -------------------------
plot(A~CO2_r, data = cal, main = "Confirm cutoffs")
# Fit polynomials to calibration curve --------------------
cal1st <- lm(A ~ CO2_r, data = cal)
cal2nd <- lm(A ~ poly(CO2_r, 2), data = cal)
cal3rd <- lm(A ~ poly(CO2_r, 3), data = cal)
cal4th <- lm(A ~ poly(CO2_r, 4), data = cal)
cal5th <- lm(A ~ poly(CO2_r, 5), data = cal)
predict1 <- predict(cal1st)
predict2 <- predict(cal2nd)
predict3 <- predict(cal3rd)
predict4 <- predict(cal4th)
predict5 <- predict(cal5th)
# Plot calibration data and curve fits --------------------
plot(cal$A ~ cal$CO2_r, main = "Calibration Fits")
lines(cal$CO2_r, predict1, col = "green")
lines(cal$CO2_r, predict2, col = "blue")
lines(cal$CO2_r, predict3, col = "red")
lines(cal$CO2_r, predict4, col = "grey")
lines(cal$CO2_r, predict5, col = "black")
legend("bottom", horiz = TRUE, title = "Polynomial",
legend = c("1st", "2nd", "3rd", "4th", "5th"),
col = c("green", "blue", "red", "grey", "black"), lty = 1)
# Use BIC to assess best polynomial -----------------------
bics <- BIC(cal1st, cal2nd, cal3rd, cal4th, cal5th)
best <- noquote(rownames(bics)[bics$BIC == min(bics$BIC)])
print(best)
}
library(racir)
library(racir)
library(racir)
library(lintr)
lint_package()
read_Walz <- function(filename, skiplines){
skiplines <- ifelse(missing(skiplines) == TRUE, 0, skiplines)
# Read in file for column names ---------------------------
colname <- read.cav(filename, skip = skiplines,
header = TRUE, fill = TRUE)
# Read in file --------------------------------------------
data <- read.csv(filename, skip = skiplines+2,
header = FALSE, fill = TRUE)
# Assign column names -------------------------------------
colnames(data) <- colnames(colname)
# Print data ----------------------------------------------
return(data)
}
library(racir)
library(racir)
racircal(calfile = system.file("extdata", "cal", package = "racir"),
mincut = 350, maxcut = 780,
datafile = system.file("extdata", "poplar_2", package = "racir"),
skiplines = 53)
library(racir)
library(racir)
racircal("empty_racir_3", mincut = 350, datafile = gingfile3)
gingfile <- list.files()
gingfile
gingfile12 <- gingfile[c(6,18)]
gingfile12
gingfile3 <- gingfile[c(5)]
gingfile3
racircal("empty_racir_3", mincut = 350, datafile = gingfile3)
racircal("empty_racir_3", mincut = 350, datafile = gingfile3)
racircal(calfile = system.file("extdata", "cal", package = "racir"),
mincut = 350, maxcut = 780,
datafile = system.file("extdata", "poplar_2", package = "racir"),
skiplines = 53)
gingfile <- list.files()
gingfile
gingfile3 <- gingfile[c(10)]
racircal("empty_racir_3", mincut = 350, datafile = gingfile3)
library(devtools)
install_github("jstinzi/racir")
library(devtools)
install_github("jstinzi/racir")
library(racir)
library(devtools)
install_github("jstinzi/racir")
install.packages("dplyr")
remove.packages(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(devtools)
install_github("jstinzi/racir")
library(racir)
gingfile <- list.files()
gingfile
gingfile12 <- gingfile[c(6,18)]
gingfile12
gingfile3 <- gingfile[c(10)]
gingfile3
racircal("empty_racir_3", mincut = 350, datafile = gingfile3)
racircal_advanced("empty_racir_3", mincut = 350, datafile = gingfile3)
racircal_advanced("empty_racir_3", mincut = 350, maxcut = 750, datafile = gingfile3)
#Create a list of files
myfiles <- c(system.file("extdata", "poplar_1", package = "racir"),
system.file("extdata", "poplar_2", package = "racir"))
racircalbatch(calfile = system.file("extdata", "cal", package = "racir"),
mincut = 350, maxcut = 780,
datafiles = myfiles, skiplines = 53)
library(ggplot2)
?opts
??opts
